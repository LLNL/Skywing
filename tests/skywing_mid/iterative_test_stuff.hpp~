#ifndef ITERATIVE_TEST_STUFF_HPP
#define ITERATIVE_TEST_STUFF_HPP

class TestAsyncPublishPolicy
{
public:
  template<typename ValueType>
  bool operator()(const ValueType& new_val, const ValueType& old_val)
  { return new_val != old_val;  }
};

class TestAsyncStopPolicy
{
public:
  template<typename CallerT>
  bool operator()(const CallerT& caller)
  { return caller.get_processor().stage_of_iteration_ >
      publish_values[tags[caller.get_processor().machine_ind_]].size();
  }
};



class TestAsyncProcessor
{
public:
  using ValueType = int;
  using ValueTag = skynet::PublishTag<ValueType>;

  TestAsyncProcessor(size_t machine_ind)
    : machine_ind_(machine_ind)
  {}
  
  ValueType get_init_publish_values()
  {
    return publish_values[tags[machine_ind_]][stage_of_iteration_];
  }

  template<typename CallerT>
  void process_update(const std::vector<ValueTag>& nbr_tags, const std::vector<ValueType>& vals,
                      const CallerT& caller)
  {
    if (caller.tags().size() != tags.size())
    {
      std::cerr << "Unexpected connection drop!\n";
      std::exit(1);
    }
    for (size_t i = 0; i < nbr_tags.size(); i++)
    {
      const auto& received_val = vals[i];
      std::lock_guard g{catch_mutex};
      ++num_values_received_;
      REQUIRE(received_val == expected_result(nbr_tags[i], stage_of_iteration_));
    }
    if (num_values_received_ == tags.size())
    {
      num_values_received_ = 0;
      ++stage_of_iteration_;
    }
  }

  ValueType prepare_for_publication([[maybe_unused]] ValueType vals_to_publish)
  {
    return publish_values[tags[machine_ind_]][stage_of_iteration_];
  }

private:
  size_t stage_of_iteration_ = 0;
  size_t num_values_received_ = 0;
  size_t machine_ind_;

  friend class TestAsyncPublishPolicy;
  friend class TestAsyncStopPolicy;
};


#endif // ITERATIVE_TEST_STUFF_HPP
