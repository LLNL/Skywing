#include <catch2/catch.hpp>

#include "skynet_core/enable_logging.hpp"

#include "skynet_core/enable_logging.hpp"
#include "skynet_upper/synchronous_iterative.hpp"

#include "utils.hpp"
#include "iterative_test_stuff.hpp"

#include <array>
#include <map>

using namespace skynet;

constexpr int num_machines = 4;
constexpr int num_connections = 1;

const std::uint16_t start_port = get_starting_port();

std::vector<std::string> tag_ids{"tag0", "tag1", "tag2", "tag3"};

const std::array<std::uint16_t, 4> ports{
  start_port, static_cast<std::uint16_t>(start_port + 1),
    static_cast<std::uint16_t>(start_port + 2), static_cast<std::uint16_t>(start_port + 3)};

data_id_map<std::vector<int>> publish_values
{
  {tag_ids[0], std::vector<int>{0, 10}},
  {tag_ids[1], std::vector<int>{1, 20}},
  {tag_ids[2], std::vector<int>{2, 30}},
  {tag_ids[3], std::vector<int>{3, 40}}
};

// const std::map<PrivateValueTag, std::vector<std::string>> nodes{
//   {private_tags[0], {"localhost:" + std::to_string(ports[0]), "localhost:" + std::to_string(ports[1])}},
//   {private_tags[1], {"localhost:" + std::to_string(ports[2]), "localhost:" + std::to_string(ports[3])}}
// };

std::mutex catch_mutex;

void machine_task(const NetworkInfo* const info, const int index)
{
  Master base_master{ports[index], std::to_string(index)};
  base_master.submit_job("job", [&](Job& job_handle, MasterHandle master) {
    connect_network(*info, master, index, [](MasterHandle m, const int i) {
      return m.connect_to_server("127.0.0.1", ports[i]).get();
    });
    ///////////////////////////////
    // Normal iterative method
    ///////////////////////////////
    using IterMethod = SynchronousIterative<TestAsyncProcessor, TestAsyncStopPolicy, TrivialResiliencePolicy>;
    IterMethod iter_method = WaiterBuilder<IterMethod>(master, job_handle, tag_ids[index], tag_ids)
      .set_processor(index, publish_values, tag_ids, catch_mutex)
      .set_stop_policy(publish_values, tag_ids)
      .build_waiter().get();
    iter_method.run
      (
       [&]([[maybe_unused]] const IterMethod& c)
       {
         std::this_thread::sleep_for(std::chrono::seconds(1));
       }
      );    
    });
  base_master.run();
}

TEST_CASE("Synchronous Iterative", "[Skynet_SynchronousIterative]")
{
  const auto network_info = make_network(num_machines, num_connections);
  std::vector<std::thread> threads;
  for (auto i = 0; i < num_machines; ++i) {
    threads.emplace_back(machine_task, &network_info, i);
  }
  for (auto&& thread : threads) {
    thread.join();
  }
}
